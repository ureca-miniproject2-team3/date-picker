<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mycom.myapp.events.dao.EventDao">

    <!--사용자 참여 중 이벤트 조회 (리스트)-->
    <select id="listEvent" resultType="com.mycom.myapp.events.dto.EventSummaryDto">
        select e.id as eventId, e.title, e.status
        from event e, user_event u
        where u.user_id = #{userId}
          and u.event_id = e.id
    </select>
    <!--사용자 참여 중 참여자 명 조회 (리스트)-->
    <select id="findUserNamesByEventId" resultType="string">
        SELECT u.name
        FROM `user` u
                 JOIN user_event ue ON u.id = ue.user_id
        WHERE ue.event_id = #{eventId}
    </select>
    <!--확정 OR 완료된 이벤트에 대해 확정된 시간 조회-->
    <select id="findTimelineByEventId" resultType="com.mycom.myapp.events.dto.TimelineDto">
    	select id as timelineId, event_id as eventId, start_time as startTime, end_time as endTime
    	from timeline
    	where event_id = #{eventId};
    </select>

    <!--이벤트 상세 정보 조회-->
    <select id="detailEvent" resultType="com.mycom.myapp.events.dto.EventDto">
        select
            e.id as eventId,
            e.title as title,
            e.owner_id as ownerId,
            e.status as status
        from event e
        where e.id = #{eventId}
    </select>

    <!--이벤트 참여자 userId 목록 조회-->
    <select id="findUserIdsByEventId" resultType="long">
        select user_id
        from user_event
        where event_id = #{eventId}
    </select>

    <!--event_date 등록된 날짜 조회-->
    <select id="findEventDatesByEventId" resultType="java.time.LocalDate">
        select event_date as eventDate
        from event_date
        where event_id = #{eventId}
    </select>

    <!--event 추가-->
    <!--
    useGeneratedKeys="true": DB 에서 생성된 PK 값을 반환받는다.
    keyProperty="eventId": 반환된 PK 값을 Java 객체의 eventId 필드에 매핑한다.
    -->
    <insert id="insertEvent" useGeneratedKeys="true" keyProperty="eventId" parameterType="com.mycom.myapp.events.dto.EventDto">
        insert into event (title, owner_id)
        values (#{title}, #{ownerId})
    </insert>

    <!--event_date 추가-->
    <insert id="insertEventDate">
        insert into event_date (event_id, event_date)
        values (#{eventId}, #{eventDate})
    </insert>

    <!--user_event 추가-->
    <insert id="insertUserEvent">
        insert into user_event (user_id, event_id)
        values (#{userId}, #{eventId})
    </insert>

    <!--event 수정-->
    <update id="updateEventTitle" parameterType="com.mycom.myapp.events.dto.EventDto">
        update event
        set title = #{title}
        where id = #{eventId}
    </update>

    <!--event 삭제-->
    <delete id="deleteEvent">
        delete
        from event
        where id = #{eventId}
    </delete>

    <!--event_date 삭제-->
    <delete id="deleteEventDate">
        delete
        from event_date
        where event_id = #{eventId}
    </delete>

    <!--user_event 삭제-->
    <delete id="deleteUserEvent">
        delete
        from user_event
        where event_id = #{eventId}
    </delete>
    
    <!--timeline 삭제-->
	<delete id="deleteTimeline">
		delete
		from timeline
		where event_id = #{eventId}
	</delete>
	
    <!--이벤트에 참여 중인 유저 id 리스트-->
    <select id="getParticipantsByEventId">
        select user_id as userId
        from user_event
        where event_id = #{eventId}
    </select>
    
    <!--확정된 이벤트 Status 변경-->
    <update id="checkEvent">
    	update event
    	set status='CHECKED'
    	where id = #{eventId}
    </update>
    
    <!--확정된 이벤트 타임라인 추가-->
    <insert id="insertTimeline" useGeneratedKeys="true" keyProperty="timelineId" parameterType="com.mycom.myapp.events.dto.TimelineDto">
    	insert into timeline(event_id, start_time, end_time)
    	values (#{eventId}, #{startTime}, #{endTime})
    </insert>
</mapper>
